using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.RazorPages;
using Microsoft.Data.SqlClient;
using System.Data;
// ‚úÖ TH√äM C√ÅC USING C·∫¶N THI·∫æT
using Microsoft.Extensions.Configuration;
using Microsoft.AspNetCore.Http;
using Microsoft.Extensions.Logging; // Khuy·∫øn kh√≠ch cho logging
using System.Threading.Tasks;     // ƒê·∫£m b·∫£o c√≥ using n√†y cho async/await

namespace QuanLyNhaSach.Pages.NhanVien
{ // ‚úÖ ƒê·∫£m b·∫£o namespace c·ªßa b·∫°n ƒë√∫ng
    public class DeleteNhanVienModel : PageModel
    {
        // ‚úÖ B·ªé: private readonly string? connStr;
        private readonly IConfiguration _configuration; // ‚úÖ ƒê·ªîI _config TH√ÄNH _configuration (n·∫øu b·∫°n d√πng _config th√¨ gi·ªØ nguy√™n)
        private readonly IHttpContextAccessor _httpContextAccessor; // ‚úÖ TH√äM
        private readonly ILogger<DeleteNhanVienModel> _logger;    // ‚úÖ TH√äM

        // ‚úÖ S·ª¨A CONSTRUCTOR ƒê·ªÇ INJECT DEPENDENCIES
        public DeleteNhanVienModel(IConfiguration configuration, IHttpContextAccessor httpContextAccessor, ILogger<DeleteNhanVienModel> logger)
        {
            _configuration = configuration;
            _httpContextAccessor = httpContextAccessor;
            _logger = logger;
            // ‚úÖ B·ªé: connStr = _config.GetConnectionString("DefaultConnection");
        }

        [BindProperty(SupportsGet = true)] // ‚úÖ Th√™m SupportsGet=true ƒë·ªÉ id t·ª´ route c√≥ th·ªÉ bind v√†o MaNV khi OnGet
        public string MaNV { get; set; } = "";
        public string? HoTen { get; set; }
        // public string? ErrorMessage { get; set; } // C√≥ th·ªÉ d√πng TempData ho·∫∑c ModelState ƒë·ªÉ b√°o l·ªói

        // ‚úÖ PH∆Ø∆†NG TH·ª®C HELPER ƒê·ªÇ L·∫§Y CONNECTION STRING
        private string? GetActiveConnectionString()
        {
            string? connStr = null;
            // Ch·ª©c nƒÉng x√≥a nh√¢n vi√™n th∆∞·ªùng d√†nh cho "Qu·∫£n l√Ω".
            // K·ª≥ v·ªçng "ActiveConnectionString" trong session c·ªßa h·ªç l√† "ManagerConnection".
            if (_httpContextAccessor.HttpContext?.Session?.IsAvailable ?? false)
            {
                connStr = _httpContextAccessor.HttpContext.Session.GetString("ActiveConnectionString");
            }

            if (!string.IsNullOrEmpty(connStr))
            {
                _logger.LogInformation("DeleteNhanVienModel: Using ActiveConnectionString from session.");
                return connStr;
            }
            else
            {
                // N·∫øu kh√¥ng c√≥ trong session, ƒë√¢y l√† l·ªói v√¨ x√≥a nh√¢n vi√™n c·∫ßn quy·ªÅn c·ª• th·ªÉ.
                // Kh√¥ng n√™n fallback v·ªÅ m·ªôt connection y·∫øu h∆°n cho thao t√°c DELETE.
                _logger.LogError("DeleteNhanVienModel: ActiveConnectionString not found in session. This operation requires a specific user context (e.g., Manager).");
                return null; // Tr·∫£ v·ªÅ null ƒë·ªÉ c√°c handler x·ª≠ l√Ω l·ªói n√†y
            }
        }

        public async Task<IActionResult> OnGetAsync(string id)
        {
            if (string.IsNullOrEmpty(id))
            {
                TempData["ErrorMessage"] = "M√£ nh√¢n vi√™n kh√¥ng h·ª£p l·ªá ƒë·ªÉ x√≥a.";
                // ‚úÖ C√¢n nh·∫Øc redirect v·ªÅ trang danh s√°ch nh√¢n vi√™n thay v√¨ EditNhanVien
                return RedirectToPage("/NhanVien/EditNhanVien"); // Ho·∫∑c trang danh s√°ch nh√¢n vi√™n c·ªßa b·∫°n
            }
            MaNV = id; // G√°n id t·ª´ route v√†o MaNV

            // ‚úÖ L·∫§Y connStr ƒê·ªòNG CHO OnGet
            string? connStr = GetActiveConnectionString();

            if (string.IsNullOrEmpty(connStr))
            {
                TempData["ErrorMessage"] = "L·ªói c·∫•u h√¨nh k·∫øt n·ªëi. Kh√¥ng th·ªÉ t·∫£i th√¥ng tin nh√¢n vi√™n ƒë·ªÉ x√≥a.";
                _logger.LogError("DeleteNhanVien OnGetAsync: Kh√¥ng th·ªÉ l·∫•y ƒë∆∞·ª£c chu·ªói k·∫øt n·ªëi ph√π h·ª£p cho Qu·∫£n l√Ω.");
                return RedirectToPage("/Login"); // Ho·∫∑c trang danh s√°ch
            }

            try
            {
                using var conn = new SqlConnection(connStr);
                await conn.OpenAsync();

                // L·∫•y th√¥ng tin c∆° b·∫£n ƒë·ªÉ hi·ªÉn th·ªã x√°c nh·∫≠n, ƒë·∫£m b·∫£o nh√¢n vi√™n ch∆∞a b·ªã x√≥a (n·∫øu c√≥ c·ªôt IsDeleted)
                var cmd = new SqlCommand("SELECT HoTen FROM NhanVien WHERE MaNV = @MaNV", conn);
                // AND (IsDeleted = 0 OR IsDeleted IS NULL) // N·∫øu c√≥ c·ªôt IsDeleted
                cmd.Parameters.AddWithValue("@MaNV", id);
                var hoTenResult = await cmd.ExecuteScalarAsync();
                HoTen = hoTenResult?.ToString();

                if (HoTen == null)
                {
                    _logger.LogWarning("Kh√¥ng t√¨m th·∫•y nh√¢n vi√™n v·ªõi M√£: {MaNV} ƒë·ªÉ x√≥a.", id);
                    TempData["ErrorMessage"] = $"Kh√¥ng t√¨m th·∫•y nh√¢n vi√™n v·ªõi M√£: {id}.";
                    return RedirectToPage("/NhanVien/EditNhanVien"); // Redirect v·ªÅ trang danh s√°ch nh√¢n vi√™n
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "L·ªói khi l·∫•y th√¥ng tin nh√¢n vi√™n {MaNV} ƒë·ªÉ x√≥a.", id);
                TempData["ErrorMessage"] = "L·ªói khi t·∫£i th√¥ng tin nh√¢n vi√™n: " + ex.Message;
                return RedirectToPage("/NhanVien/EditNhanVien"); // Redirect v·ªÅ trang danh s√°ch
            }

            return Page();
        }

        public async Task<IActionResult> OnPostAsync() // Handler m·∫∑c ƒë·ªãnh cho POST, s·∫Ω x√≥a nh√¢n vi√™n c√≥ MaNV t·ª´ BindProperty
        {
            // ‚úÖ KI·ªÇM TRA QUY·ªÄN H·∫†N TR∆Ø·ªöC KHI TH·ª∞C HI·ªÜN THAO T√ÅC X√ìA
            var currentRole = _httpContextAccessor.HttpContext?.Session?.GetString("CurrentRole");
            if (currentRole != "Qu·∫£n l√Ω") // Ch·ªâ "Qu·∫£n l√Ω" m·ªõi ƒë∆∞·ª£c x√≥a
            {
                _logger.LogWarning("User v·ªõi vai tr√≤ '{CurrentRole}' ƒë√£ c·ªë g·∫Øng x√≥a nh√¢n vi√™n. T·ª´ ch·ªëi truy c·∫≠p.", currentRole);
                TempData["ErrorMessage"] = "B·∫°n kh√¥ng c√≥ quy·ªÅn th·ª±c hi·ªán ch·ª©c nƒÉng n√†y.";
                return RedirectToPage("/Login"); // Ho·∫∑c trang AccessDenied, ho·∫∑c trang danh s√°ch Nh√¢n Vi√™n
            }

            if (string.IsNullOrEmpty(MaNV))
            {
                TempData["ErrorMessage"] = "M√£ nh√¢n vi√™n kh√¥ng h·ª£p l·ªá ƒë·ªÉ x√≥a.";
                _logger.LogWarning("OnPostAsync DeleteNhanVien: MaNV l√† null ho·∫∑c r·ªóng.");
                return RedirectToPage("/NhanVien/EditNhanVien");
            }

            // ‚úÖ L·∫§Y connStr ƒê·ªòNG CHO OnPost (y√™u c·∫ßu nghi√™m ng·∫∑t connStr c·ªßa Qu·∫£n l√Ω t·ª´ session)
            string? connStr = GetActiveConnectionString();
            if (string.IsNullOrEmpty(connStr))
            {
                TempData["ErrorMessage"] = "L·ªói nghi√™m tr·ªçng: Kh√¥ng th·ªÉ x√°c th·ª±c k·∫øt n·ªëi c·ªßa Qu·∫£n l√Ω ƒë·ªÉ x√≥a. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.";
                _logger.LogError("DeleteNhanVien OnPostAsync: Kh√¥ng th·ªÉ l·∫•y ƒë∆∞·ª£c chu·ªói k·∫øt n·ªëi ph√π h·ª£p cho Qu·∫£n l√Ω ƒë·ªÉ x√≥a.");
                return RedirectToPage("/Login"); // Ho·∫∑c trang Login
            }

            try
            {
                using var conn = new SqlConnection(connStr); // S·ª≠ d·ª•ng connStr ƒë√£ ƒë∆∞·ª£c l·∫•y ƒë·ªông
                await conn.OpenAsync();

                // Gi·∫£ s·ª≠ sp_XoaNhanVien c·ªßa b·∫°n th·ª±c hi·ªán x√≥a (c√≥ th·ªÉ l√† x√≥a m·ªÅm ho·∫∑c x√≥a c·ª©ng)
                // v√† c√≥ th·ªÉ c·∫£ vi·ªác x√≥a LOGIN/USER SQL t∆∞∆°ng ·ª©ng n·∫øu SP x·ª≠ l√Ω vi·ªác ƒë√≥.
                var cmd = new SqlCommand("sp_XoaNhanVien", conn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@MaNV", MaNV);
                // ‚úÖ C√¢n nh·∫Øc th√™m tham s·ªë ng∆∞·ªùi x√≥a n·∫øu Stored Procedure c·ªßa b·∫°n c·∫ßn
                // var currentUser = _httpContextAccessor.HttpContext?.Session?.GetString("CurrentUser");
                // cmd.Parameters.AddWithValue("@NguoiXoa", currentUser);

                await cmd.ExecuteNonQueryAsync();

                _logger.LogInformation("Nh√¢n vi√™n {MaNV} ƒë√£ ƒë∆∞·ª£c x√≥a th√†nh c√¥ng b·ªüi user {CurrentUser}.", MaNV, _httpContextAccessor.HttpContext?.Session?.GetString("CurrentUser"));
                TempData["SuccessMessage"] = $"üóëÔ∏è ƒê√£ xo√° nh√¢n vi√™n {MaNV} - {HoTen} th√†nh c√¥ng.";
            }
            catch (SqlException sqlEx)
            {
                _logger.LogError(sqlEx, "L·ªói SQL khi x√≥a nh√¢n vi√™n {MaNV}.", MaNV);
                TempData["ErrorMessage"] = $"L·ªói SQL khi x√≥a nh√¢n vi√™n: {sqlEx.Message}";
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "L·ªói kh√¥ng mong mu·ªën khi x√≥a nh√¢n vi√™n {MaNV}.", MaNV);
                TempData["ErrorMessage"] = "L·ªói h·ªá th·ªëng khi x√≥a nh√¢n vi√™n: " + ex.Message;
            }

            // ‚úÖ Chuy·ªÉn h∆∞·ªõng v·ªÅ trang danh s√°ch nh√¢n vi√™n sau khi x√≥a
            return RedirectToPage("/NhanVien/EditNhanVien"); // Ho·∫∑c t√™n trang danh s√°ch nh√¢n vi√™n c·ªßa b·∫°n
        }
    }
}